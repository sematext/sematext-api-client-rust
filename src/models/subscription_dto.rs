/* 
 * Sematext Cloud API
 *
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SubscriptionDto {
  #[serde(rename = "addresses")]
  addresses: Option<String>,
  #[serde(rename = "enable")]
  enable: Option<bool>,
  #[serde(rename = "filters")]
  filters: Option<String>,
  #[serde(rename = "frequency")]
  frequency: Option<String>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "reportName")]
  report_name: Option<String>,
  #[serde(rename = "sendTime")]
  send_time: Option<String>,
  #[serde(rename = "subject")]
  subject: Option<String>,
  #[serde(rename = "systemId")]
  system_id: Option<i64>,
  #[serde(rename = "text")]
  text: Option<String>,
  #[serde(rename = "timeRange")]
  time_range: Option<String>,
  #[serde(rename = "userPermissions")]
  user_permissions: Option<::models::UserPermissions>
}

impl SubscriptionDto {
  pub fn new() -> SubscriptionDto {
    SubscriptionDto {
      addresses: None,
      enable: None,
      filters: None,
      frequency: None,
      id: None,
      report_name: None,
      send_time: None,
      subject: None,
      system_id: None,
      text: None,
      time_range: None,
      user_permissions: None
    }
  }

  pub fn set_addresses(&mut self, addresses: String) {
    self.addresses = Some(addresses);
  }

  pub fn with_addresses(mut self, addresses: String) -> SubscriptionDto {
    self.addresses = Some(addresses);
    self
  }

  pub fn addresses(&self) -> Option<&String> {
    self.addresses.as_ref()
  }

  pub fn reset_addresses(&mut self) {
    self.addresses = None;
  }

  pub fn set_enable(&mut self, enable: bool) {
    self.enable = Some(enable);
  }

  pub fn with_enable(mut self, enable: bool) -> SubscriptionDto {
    self.enable = Some(enable);
    self
  }

  pub fn enable(&self) -> Option<&bool> {
    self.enable.as_ref()
  }

  pub fn reset_enable(&mut self) {
    self.enable = None;
  }

  pub fn set_filters(&mut self, filters: String) {
    self.filters = Some(filters);
  }

  pub fn with_filters(mut self, filters: String) -> SubscriptionDto {
    self.filters = Some(filters);
    self
  }

  pub fn filters(&self) -> Option<&String> {
    self.filters.as_ref()
  }

  pub fn reset_filters(&mut self) {
    self.filters = None;
  }

  pub fn set_frequency(&mut self, frequency: String) {
    self.frequency = Some(frequency);
  }

  pub fn with_frequency(mut self, frequency: String) -> SubscriptionDto {
    self.frequency = Some(frequency);
    self
  }

  pub fn frequency(&self) -> Option<&String> {
    self.frequency.as_ref()
  }

  pub fn reset_frequency(&mut self) {
    self.frequency = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> SubscriptionDto {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_report_name(&mut self, report_name: String) {
    self.report_name = Some(report_name);
  }

  pub fn with_report_name(mut self, report_name: String) -> SubscriptionDto {
    self.report_name = Some(report_name);
    self
  }

  pub fn report_name(&self) -> Option<&String> {
    self.report_name.as_ref()
  }

  pub fn reset_report_name(&mut self) {
    self.report_name = None;
  }

  pub fn set_send_time(&mut self, send_time: String) {
    self.send_time = Some(send_time);
  }

  pub fn with_send_time(mut self, send_time: String) -> SubscriptionDto {
    self.send_time = Some(send_time);
    self
  }

  pub fn send_time(&self) -> Option<&String> {
    self.send_time.as_ref()
  }

  pub fn reset_send_time(&mut self) {
    self.send_time = None;
  }

  pub fn set_subject(&mut self, subject: String) {
    self.subject = Some(subject);
  }

  pub fn with_subject(mut self, subject: String) -> SubscriptionDto {
    self.subject = Some(subject);
    self
  }

  pub fn subject(&self) -> Option<&String> {
    self.subject.as_ref()
  }

  pub fn reset_subject(&mut self) {
    self.subject = None;
  }

  pub fn set_system_id(&mut self, system_id: i64) {
    self.system_id = Some(system_id);
  }

  pub fn with_system_id(mut self, system_id: i64) -> SubscriptionDto {
    self.system_id = Some(system_id);
    self
  }

  pub fn system_id(&self) -> Option<&i64> {
    self.system_id.as_ref()
  }

  pub fn reset_system_id(&mut self) {
    self.system_id = None;
  }

  pub fn set_text(&mut self, text: String) {
    self.text = Some(text);
  }

  pub fn with_text(mut self, text: String) -> SubscriptionDto {
    self.text = Some(text);
    self
  }

  pub fn text(&self) -> Option<&String> {
    self.text.as_ref()
  }

  pub fn reset_text(&mut self) {
    self.text = None;
  }

  pub fn set_time_range(&mut self, time_range: String) {
    self.time_range = Some(time_range);
  }

  pub fn with_time_range(mut self, time_range: String) -> SubscriptionDto {
    self.time_range = Some(time_range);
    self
  }

  pub fn time_range(&self) -> Option<&String> {
    self.time_range.as_ref()
  }

  pub fn reset_time_range(&mut self) {
    self.time_range = None;
  }

  pub fn set_user_permissions(&mut self, user_permissions: ::models::UserPermissions) {
    self.user_permissions = Some(user_permissions);
  }

  pub fn with_user_permissions(mut self, user_permissions: ::models::UserPermissions) -> SubscriptionDto {
    self.user_permissions = Some(user_permissions);
    self
  }

  pub fn user_permissions(&self) -> Option<&::models::UserPermissions> {
    self.user_permissions.as_ref()
  }

  pub fn reset_user_permissions(&mut self) {
    self.user_permissions = None;
  }

}



