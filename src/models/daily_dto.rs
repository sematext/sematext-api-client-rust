/* 
 * Sematext Cloud API
 *
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DailyDto {
  #[serde(rename = "day")]
  day: Option<i64>,
  #[serde(rename = "failed")]
  failed: Option<i64>,
  #[serde(rename = "indexed")]
  indexed: Option<i64>,
  #[serde(rename = "volume")]
  volume: Option<i64>
}

impl DailyDto {
  pub fn new() -> DailyDto {
    DailyDto {
      day: None,
      failed: None,
      indexed: None,
      volume: None
    }
  }

  pub fn set_day(&mut self, day: i64) {
    self.day = Some(day);
  }

  pub fn with_day(mut self, day: i64) -> DailyDto {
    self.day = Some(day);
    self
  }

  pub fn day(&self) -> Option<&i64> {
    self.day.as_ref()
  }

  pub fn reset_day(&mut self) {
    self.day = None;
  }

  pub fn set_failed(&mut self, failed: i64) {
    self.failed = Some(failed);
  }

  pub fn with_failed(mut self, failed: i64) -> DailyDto {
    self.failed = Some(failed);
    self
  }

  pub fn failed(&self) -> Option<&i64> {
    self.failed.as_ref()
  }

  pub fn reset_failed(&mut self) {
    self.failed = None;
  }

  pub fn set_indexed(&mut self, indexed: i64) {
    self.indexed = Some(indexed);
  }

  pub fn with_indexed(mut self, indexed: i64) -> DailyDto {
    self.indexed = Some(indexed);
    self
  }

  pub fn indexed(&self) -> Option<&i64> {
    self.indexed.as_ref()
  }

  pub fn reset_indexed(&mut self) {
    self.indexed = None;
  }

  pub fn set_volume(&mut self, volume: i64) {
    self.volume = Some(volume);
  }

  pub fn with_volume(mut self, volume: i64) -> DailyDto {
    self.volume = Some(volume);
    self
  }

  pub fn volume(&self) -> Option<&i64> {
    self.volume.as_ref()
  }

  pub fn reset_volume(&mut self) {
    self.volume = None;
  }

}



