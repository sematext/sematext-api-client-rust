/* 
 * Sematext Cloud API
 *
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
#![allow(unused_imports)]

use serde_json::Value;
use bigdecimal::BigDecimal;
use chrono::{Date, NaiveDateTime, NaiveDate, DateTime, FixedOffset, Utc};

use crate::models::*;
use crate::date_serializer;
use crate::date_serializer_opt;
use crate::serialize_quoted_numbers;
use crate::serialize_quoted_numbers_opt;
//Uncomment this to deal with limited rfc support on server side
//use crate::datetime_serializer::*;

#[derive(Debug, Serialize, Deserialize, PartialEq, Clone)]
pub struct BasicOrganizationDto {
  #[serde(rename = "authMethods")]
  #[serde(default)]
  auth_methods: Option<Vec<BasicAuthMethodDto>>, 
  #[serde(rename = "name")]
  #[serde(default)]
  name: Option<String>, 
  #[serde(rename = "status")]
  #[serde(default)]
  status: Option<String>, 
  #[serde(rename = "uuid")]
  #[serde(default)]
  uuid: Option<String> 
}

impl BasicOrganizationDto {
  pub fn new() -> BasicOrganizationDto {
    BasicOrganizationDto {
      auth_methods: None,
      name: None,
      status: None,
      uuid: None
    }
  }

  pub fn set_auth_methods(&mut self, auth_methods: Vec<BasicAuthMethodDto>) {
    self.auth_methods = Some(auth_methods);
  }

  pub fn with_auth_methods(mut self, auth_methods: Vec<BasicAuthMethodDto>) -> BasicOrganizationDto {
    self.auth_methods = Some(auth_methods);
    self
  }

  pub fn auth_methods(&self) -> Option<&Vec<BasicAuthMethodDto>> {
    self.auth_methods.as_ref()
  }

  pub fn reset_auth_methods(&mut self) {
    self.auth_methods = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> BasicOrganizationDto {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> BasicOrganizationDto {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_uuid(&mut self, uuid: String) {
    self.uuid = Some(uuid);
  }

  pub fn with_uuid(mut self, uuid: String) -> BasicOrganizationDto {
    self.uuid = Some(uuid);
    self
  }

  pub fn uuid(&self) -> Option<&String> {
    self.uuid.as_ref()
  }

  pub fn reset_uuid(&mut self) {
    self.uuid = None;
  }


  pub fn validate(&self) {
  }

}


