/* 
 * Sematext Cloud API
 *
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
#![allow(unused_imports)]

use serde_json::Value;
use bigdecimal::BigDecimal;
use chrono::{Date, NaiveDateTime, NaiveDate, DateTime, FixedOffset, Utc};

use crate::models::*;
use crate::date_serializer;
use crate::date_serializer_opt;
use crate::serialize_quoted_numbers;
use crate::serialize_quoted_numbers_opt;
//Uncomment this to deal with limited rfc support on server side
//use crate::datetime_serializer::*;

#[derive(Debug, Serialize, Deserialize, PartialEq, Clone)]
pub struct AlertRuleScheduleWeekdayDto {
  #[serde(rename = "day")]
  #[serde(default)]
  day: Option<String>, 
  #[serde(rename = "index")]
  #[serde(default)]
  index: Option<i32>, 
  #[serde(rename = "intervals")]
  #[serde(default)]
  intervals: Option<Vec<AlertRuleScheduleTimeRangeDto>>, 
  #[serde(rename = "label")]
  #[serde(default)]
  label: Option<String>, 
  #[serde(rename = "type")]
  #[serde(default)]
  _type: Option<String> 
}

impl AlertRuleScheduleWeekdayDto {
  pub fn new() -> AlertRuleScheduleWeekdayDto {
    AlertRuleScheduleWeekdayDto {
      day: None,
      index: None,
      intervals: None,
      label: None,
      _type: None
    }
  }

  pub fn set_day(&mut self, day: String) {
    self.day = Some(day);
  }

  pub fn with_day(mut self, day: String) -> AlertRuleScheduleWeekdayDto {
    self.day = Some(day);
    self
  }

  pub fn day(&self) -> Option<&String> {
    self.day.as_ref()
  }

  pub fn reset_day(&mut self) {
    self.day = None;
  }

  pub fn set_index(&mut self, index: i32) {
    self.index = Some(index);
  }

  pub fn with_index(mut self, index: i32) -> AlertRuleScheduleWeekdayDto {
    self.index = Some(index);
    self
  }

  pub fn index(&self) -> Option<&i32> {
    self.index.as_ref()
  }

  pub fn reset_index(&mut self) {
    self.index = None;
  }

  pub fn set_intervals(&mut self, intervals: Vec<AlertRuleScheduleTimeRangeDto>) {
    self.intervals = Some(intervals);
  }

  pub fn with_intervals(mut self, intervals: Vec<AlertRuleScheduleTimeRangeDto>) -> AlertRuleScheduleWeekdayDto {
    self.intervals = Some(intervals);
    self
  }

  pub fn intervals(&self) -> Option<&Vec<AlertRuleScheduleTimeRangeDto>> {
    self.intervals.as_ref()
  }

  pub fn reset_intervals(&mut self) {
    self.intervals = None;
  }

  pub fn set_label(&mut self, label: String) {
    self.label = Some(label);
  }

  pub fn with_label(mut self, label: String) -> AlertRuleScheduleWeekdayDto {
    self.label = Some(label);
    self
  }

  pub fn label(&self) -> Option<&String> {
    self.label.as_ref()
  }

  pub fn reset_label(&mut self) {
    self.label = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> AlertRuleScheduleWeekdayDto {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }


  pub fn validate(&self) {
  }

}


