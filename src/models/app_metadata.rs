/* 
 * Sematext Cloud API
 *
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
#![allow(unused_imports)]

use serde_json::Value;
use bigdecimal::BigDecimal;
use chrono::{Date, NaiveDateTime, NaiveDate, DateTime, FixedOffset, Utc};

use crate::models::*;
use crate::date_serializer;
use crate::date_serializer_opt;
use crate::serialize_quoted_numbers;
use crate::serialize_quoted_numbers_opt;
//Uncomment this to deal with limited rfc support on server side
//use crate::datetime_serializer::*;

#[derive(Debug, Serialize, Deserialize, PartialEq, Clone)]
pub struct AppMetadata {
  #[serde(rename = "awsCloudWatchAccessKey")]
  #[serde(default)]
  aws_cloud_watch_access_key: Option<String>,  // zzzzz 
  #[serde(rename = "awsCloudWatchSecretKey")]
  #[serde(default)]
  aws_cloud_watch_secret_key: Option<String>,  // xxxxx 
  #[serde(rename = "awsFetchFrequency")]
  #[serde(default)]
  aws_fetch_frequency: Option<String>,  // FIVE_MINUTES 
  #[serde(rename = "awsRegion")]
  #[serde(default)]
  aws_region: Option<String>,  // US_EAST_1 
  #[serde(rename = "subTypes")]
  #[serde(default)]
  sub_types: Option<Vec<String>>  // aws_ec2,aws_elb 
}

impl AppMetadata {
  pub fn new() -> AppMetadata {
    AppMetadata {
      aws_cloud_watch_access_key: None,
      aws_cloud_watch_secret_key: None,
      aws_fetch_frequency: None,
      aws_region: None,
      sub_types: None
    }
  }

  pub fn set_aws_cloud_watch_access_key(&mut self, aws_cloud_watch_access_key: String) {
    self.aws_cloud_watch_access_key = Some(aws_cloud_watch_access_key);
  }

  pub fn with_aws_cloud_watch_access_key(mut self, aws_cloud_watch_access_key: String) -> AppMetadata {
    self.aws_cloud_watch_access_key = Some(aws_cloud_watch_access_key);
    self
  }

  pub fn aws_cloud_watch_access_key(&self) -> Option<&String> {
    self.aws_cloud_watch_access_key.as_ref()
  }

  pub fn reset_aws_cloud_watch_access_key(&mut self) {
    self.aws_cloud_watch_access_key = None;
  }

  pub fn set_aws_cloud_watch_secret_key(&mut self, aws_cloud_watch_secret_key: String) {
    self.aws_cloud_watch_secret_key = Some(aws_cloud_watch_secret_key);
  }

  pub fn with_aws_cloud_watch_secret_key(mut self, aws_cloud_watch_secret_key: String) -> AppMetadata {
    self.aws_cloud_watch_secret_key = Some(aws_cloud_watch_secret_key);
    self
  }

  pub fn aws_cloud_watch_secret_key(&self) -> Option<&String> {
    self.aws_cloud_watch_secret_key.as_ref()
  }

  pub fn reset_aws_cloud_watch_secret_key(&mut self) {
    self.aws_cloud_watch_secret_key = None;
  }

  pub fn set_aws_fetch_frequency(&mut self, aws_fetch_frequency: String) {
    self.aws_fetch_frequency = Some(aws_fetch_frequency);
  }

  pub fn with_aws_fetch_frequency(mut self, aws_fetch_frequency: String) -> AppMetadata {
    self.aws_fetch_frequency = Some(aws_fetch_frequency);
    self
  }

  pub fn aws_fetch_frequency(&self) -> Option<&String> {
    self.aws_fetch_frequency.as_ref()
  }

  pub fn reset_aws_fetch_frequency(&mut self) {
    self.aws_fetch_frequency = None;
  }

  pub fn set_aws_region(&mut self, aws_region: String) {
    self.aws_region = Some(aws_region);
  }

  pub fn with_aws_region(mut self, aws_region: String) -> AppMetadata {
    self.aws_region = Some(aws_region);
    self
  }

  pub fn aws_region(&self) -> Option<&String> {
    self.aws_region.as_ref()
  }

  pub fn reset_aws_region(&mut self) {
    self.aws_region = None;
  }

  pub fn set_sub_types(&mut self, sub_types: Vec<String>) {
    self.sub_types = Some(sub_types);
  }

  pub fn with_sub_types(mut self, sub_types: Vec<String>) -> AppMetadata {
    self.sub_types = Some(sub_types);
    self
  }

  pub fn sub_types(&self) -> Option<&Vec<String>> {
    self.sub_types.as_ref()
  }

  pub fn reset_sub_types(&mut self) {
    self.sub_types = None;
  }


  pub fn validate(&self) {
  }

}


