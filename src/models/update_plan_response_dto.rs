/* 
 * Sematext Cloud API
 *
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
#![allow(unused_imports)]

use serde_json::Value;
use bigdecimal::BigDecimal;
use chrono::{Date, NaiveDateTime, NaiveDate, DateTime, FixedOffset, Utc};

use crate::models::*;
use crate::date_serializer;
use crate::date_serializer_opt;
use crate::serialize_quoted_numbers;
use crate::serialize_quoted_numbers_opt;
//Uncomment this to deal with limited rfc support on server side
//use crate::datetime_serializer::*;

#[derive(Debug, Serialize, Deserialize, PartialEq, Clone)]
pub struct UpdatePlanResponseDto {
  #[serde(rename = "events")]
  #[serde(default)]
  events: Option<Vec<EventDto>>, 
  #[serde(rename = "planId")]
  #[serde(default)]
  plan_id: Option<i64> 
}

impl UpdatePlanResponseDto {
  pub fn new() -> UpdatePlanResponseDto {
    UpdatePlanResponseDto {
      events: None,
      plan_id: None
    }
  }

  pub fn set_events(&mut self, events: Vec<EventDto>) {
    self.events = Some(events);
  }

  pub fn with_events(mut self, events: Vec<EventDto>) -> UpdatePlanResponseDto {
    self.events = Some(events);
    self
  }

  pub fn events(&self) -> Option<&Vec<EventDto>> {
    self.events.as_ref()
  }

  pub fn reset_events(&mut self) {
    self.events = None;
  }

  pub fn set_plan_id(&mut self, plan_id: i64) {
    self.plan_id = Some(plan_id);
  }

  pub fn with_plan_id(mut self, plan_id: i64) -> UpdatePlanResponseDto {
    self.plan_id = Some(plan_id);
    self
  }

  pub fn plan_id(&self) -> Option<&i64> {
    self.plan_id.as_ref()
  }

  pub fn reset_plan_id(&mut self) {
    self.plan_id = None;
  }


  pub fn validate(&self) {
  }

}


