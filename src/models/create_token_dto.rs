/* 
 * Sematext Cloud API
 *
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
#![allow(unused_imports)]

use serde_json::Value;
use bigdecimal::BigDecimal;
use chrono::{Date, NaiveDateTime, NaiveDate, DateTime, FixedOffset, Utc};

use crate::models::*;
use crate::date_serializer;
use crate::date_serializer_opt;
use crate::serialize_quoted_numbers;
use crate::serialize_quoted_numbers_opt;
//Uncomment this to deal with limited rfc support on server side
//use crate::datetime_serializer::*;

#[derive(Debug, Serialize, Deserialize, PartialEq, Clone)]
pub struct CreateTokenDto {
  #[serde(rename = "name")]
  #[serde(default)]
  name: Option<String>, 
  #[serde(rename = "readable")]
  #[serde(default)]
  readable: Option<bool>, 
  #[serde(rename = "writeable")]
  #[serde(default)]
  writeable: Option<bool> 
}

impl CreateTokenDto {
  pub fn new() -> CreateTokenDto {
    CreateTokenDto {
      name: None,
      readable: None,
      writeable: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> CreateTokenDto {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_readable(&mut self, readable: bool) {
    self.readable = Some(readable);
  }

  pub fn with_readable(mut self, readable: bool) -> CreateTokenDto {
    self.readable = Some(readable);
    self
  }

  pub fn readable(&self) -> Option<&bool> {
    self.readable.as_ref()
  }

  pub fn reset_readable(&mut self) {
    self.readable = None;
  }

  pub fn set_writeable(&mut self, writeable: bool) {
    self.writeable = Some(writeable);
  }

  pub fn with_writeable(mut self, writeable: bool) -> CreateTokenDto {
    self.writeable = Some(writeable);
    self
  }

  pub fn writeable(&self) -> Option<&bool> {
    self.writeable.as_ref()
  }

  pub fn reset_writeable(&mut self) {
    self.writeable = None;
  }


  pub fn validate(&self) {
  }

}


