/*
 * Sematext Cloud API
 *
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * The version of the OpenAPI document: v3
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct App {
    #[serde(rename = "ajaxThreshold", skip_serializing_if = "Option::is_none")]
    pub ajax_threshold: Option<i64>,
    #[serde(rename = "appType", skip_serializing_if = "Option::is_none")]
    pub app_type: Option<String>,
    #[serde(rename = "appTypeId", skip_serializing_if = "Option::is_none")]
    pub app_type_id: Option<i64>,
    #[serde(rename = "creatorEmail", skip_serializing_if = "Option::is_none")]
    pub creator_email: Option<String>,
    #[serde(rename = "creditCardExpiry", skip_serializing_if = "Option::is_none")]
    pub credit_card_expiry: Option<String>,
    #[serde(rename = "creditCardNumber", skip_serializing_if = "Option::is_none")]
    pub credit_card_number: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "displayStatus", skip_serializing_if = "Option::is_none")]
    pub display_status: Option<String>,
    #[serde(rename = "firstDataSavedDate", skip_serializing_if = "Option::is_none")]
    pub first_data_saved_date: Option<i64>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(rename = "integration", skip_serializing_if = "Option::is_none")]
    pub integration: Option<crate::models::ServiceIntegration>,
    #[serde(rename = "lastDataReceivedDate", skip_serializing_if = "Option::is_none")]
    pub last_data_received_date: Option<i64>,
    #[serde(rename = "lastDataSavedDate", skip_serializing_if = "Option::is_none")]
    pub last_data_saved_date: Option<i64>,
    #[serde(rename = "loggedInUserAppRole", skip_serializing_if = "Option::is_none")]
    pub logged_in_user_app_role: Option<String>,
    #[serde(rename = "monthlyInvoiceAccount", skip_serializing_if = "Option::is_none")]
    pub monthly_invoice_account: Option<bool>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "ownerEmail", skip_serializing_if = "Option::is_none")]
    pub owner_email: Option<String>,
    #[serde(rename = "owningOrganization", skip_serializing_if = "Option::is_none")]
    pub owning_organization: Option<crate::models::BasicOrganizationDto>,
    #[serde(rename = "pageLoadThreshold", skip_serializing_if = "Option::is_none")]
    pub page_load_threshold: Option<i64>,
    #[serde(rename = "paymentMethodId", skip_serializing_if = "Option::is_none")]
    pub payment_method_id: Option<i64>,
    #[serde(rename = "plan", skip_serializing_if = "Option::is_none")]
    pub plan: Option<crate::models::Plan>,
    #[serde(rename = "prepaidAccount", skip_serializing_if = "Option::is_none")]
    pub prepaid_account: Option<bool>,
    #[serde(rename = "readToken", skip_serializing_if = "Option::is_none")]
    pub read_token: Option<String>,
    #[serde(rename = "readWriteToken", skip_serializing_if = "Option::is_none")]
    pub read_write_token: Option<String>,
    #[serde(rename = "registrationDate", skip_serializing_if = "Option::is_none")]
    pub registration_date: Option<i64>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "token", skip_serializing_if = "Option::is_none")]
    pub token: Option<String>,
    #[serde(rename = "trialEndDate", skip_serializing_if = "Option::is_none")]
    pub trial_end_date: Option<i64>,
    #[serde(rename = "urlGroupLimit", skip_serializing_if = "Option::is_none")]
    pub url_group_limit: Option<i32>,
    #[serde(rename = "userRoles", skip_serializing_if = "Option::is_none")]
    pub user_roles: Option<Vec<crate::models::UserRole>>,
    #[serde(rename = "writeToken", skip_serializing_if = "Option::is_none")]
    pub write_token: Option<String>,
}

impl App {
    pub fn new() -> App {
        App {
            ajax_threshold: None,
            app_type: None,
            app_type_id: None,
            creator_email: None,
            credit_card_expiry: None,
            credit_card_number: None,
            description: None,
            display_status: None,
            first_data_saved_date: None,
            id: None,
            integration: None,
            last_data_received_date: None,
            last_data_saved_date: None,
            logged_in_user_app_role: None,
            monthly_invoice_account: None,
            name: None,
            owner_email: None,
            owning_organization: None,
            page_load_threshold: None,
            payment_method_id: None,
            plan: None,
            prepaid_account: None,
            read_token: None,
            read_write_token: None,
            registration_date: None,
            status: None,
            token: None,
            trial_end_date: None,
            url_group_limit: None,
            user_roles: None,
            write_token: None,
        }
    }
}


